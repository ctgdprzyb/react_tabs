{"version":3,"sources":["components/Tabs/Tabs.tsx","App.tsx","index.tsx"],"names":["Tabs","tabs","selectedTabId","onTabSelected","activeTabId","find","tab","id","activeTab","className","map","href","onClick","handleTabChange","title","content","App","useState","setSelectedTabId","ReactDOM","render","document","getElementById"],"mappings":"yMAYaA,EAAO,SAAC,GAAuD,IAAD,EAApDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,cACpCC,GAAc,UAAAH,EAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAOL,YAA5B,eAA4CK,KAC3DN,EAAK,GAAGM,GAQPC,EAAYP,EAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAOL,KAE9C,OACE,sBAAK,UAAQ,gBAAb,UACE,qBAAKO,UAAU,gBAAf,SACE,6BACGR,EAAKS,KAAI,SAAAJ,GACR,OACE,4CACE,UAAQ,OACJF,IAAgBE,EAAIC,IAAM,CAAEE,UAAW,cAF7C,aAIE,mBACEE,KAAI,WAAML,EAAIC,IACd,UAAQ,UACRK,QAAS,kBArBD,SAACN,GACnBA,EAAIC,KAAOL,GACbC,EAAcG,GAmBaO,CAAgBP,IAHjC,SAKGA,EAAIQ,kBAQjB,qBAAKL,UAAU,QAAQ,UAAQ,aAA/B,gBACID,QADJ,IACIA,OADJ,EACIA,EAAWO,cCpCRd,EAAc,CACzB,CAAEM,GAAI,QAASO,MAAO,QAASC,QAAS,eACxC,CAAER,GAAI,QAASO,MAAO,QAASC,QAAS,eACxC,CAAER,GAAI,QAASO,MAAO,QAASC,QAAS,gBAG7BC,EAAgB,WAAO,IAAD,EACjC,EAA0CC,mBAAShB,EAAK,GAAGM,IAA3D,mBAAOL,EAAP,KAAsBgB,EAAtB,KAMA,OACE,sBAAKT,UAAU,UAAf,UACE,qBAAIA,UAAU,QAAd,4BAEG,IAFH,UAGGR,EAAKI,MAAK,SAAAC,GAAG,OAAIJ,IAAkBI,EAAIC,aAH1C,aAGG,EAA4CO,SAG/C,cAAC,EAAD,CACEb,KAAMA,EACNC,cAAeA,EACfC,cAfgB,SAACG,GACrBY,EAAiBZ,EAAIC,WCnBzBY,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.575dbd66.chunk.js","sourcesContent":["interface Tab {\n  id: string,\n  title: string,\n  content: string,\n}\n\ninterface TabsProps {\n  tabs: Tab[],\n  selectedTabId: string,\n  onTabSelected: (tab: Tab) => void,\n}\n\nexport const Tabs = ({ tabs, selectedTabId, onTabSelected }: TabsProps) => {\n  const activeTabId = tabs.find(tab => tab.id === selectedTabId)?.id\n    || tabs[0].id;\n\n  const handleTabChange = (tab: Tab) => {\n    if (tab.id !== selectedTabId) {\n      onTabSelected(tab);\n    }\n  };\n\n  const activeTab = tabs.find(tab => tab.id === selectedTabId);\n\n  return (\n    <div data-cy=\"TabsComponent\">\n      <div className=\"tabs is-boxed\">\n        <ul>\n          {tabs.map(tab => {\n            return (\n              <li\n                data-cy=\"Tab\"\n                {...activeTabId === tab.id && { className: 'is-active' }}\n              >\n                <a\n                  href={`#${tab.id}`}\n                  data-cy=\"TabLink\"\n                  onClick={() => handleTabChange(tab)}\n                >\n                  {tab.title}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <div className=\"block\" data-cy=\"TabContent\">\n        {(activeTab?.content)}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { Tabs } from './components/Tabs';\n\ninterface Tab {\n  id: string,\n  title: string,\n  content: string,\n}\n\nexport const tabs: Tab[] = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const App: React.FC = () => {\n  const [selectedTabId, setSelectedTabId] = useState(tabs[0].id);\n\n  const onTabSelected = (tab: Tab) => {\n    setSelectedTabId(tab.id);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1 className=\"title\">\n        Selected tab is\n        {' '}\n        {tabs.find(tab => selectedTabId === tab.id)?.title}\n      </h1>\n\n      <Tabs\n        tabs={tabs}\n        selectedTabId={selectedTabId}\n        onTabSelected={onTabSelected}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}